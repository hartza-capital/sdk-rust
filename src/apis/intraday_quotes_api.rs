/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`option_quotes_intraday_instruments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OptionQuotesIntradayInstrumentsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_quotes_intraday_instruments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchQuotesIntradayInstrumentsError {
    Status400(models::Orders400Response),
    Status401(models::Orders401Response),
    Status404(models::AccountById404Response),
    Status500(models::Orders500Response),
    UnknownValue(serde_json::Value),
}


/// Options method is used to describe the communication options for the targeted resource.
pub async fn option_quotes_intraday_instruments(configuration: &configuration::Configuration, ) -> Result<(), Error<OptionQuotesIntradayInstrumentsError>> {

    let uri_str = format!("{}/v1/intraday/instruments", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::OPTIONS, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OptionQuotesIntradayInstrumentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This endpoint return a list of Intraday Quotes aggregated by interval (5 minutes, 15 minutes, 30 minutes, 1 hour, 4 hours, 8 hours and 1 day). 
pub async fn search_quotes_intraday_instruments(configuration: &configuration::Configuration, search_quotes_intraday_instruments_request: models::SearchQuotesIntradayInstrumentsRequest) -> Result<models::SearchQuotesPortfolios200Response, Error<SearchQuotesIntradayInstrumentsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_search_quotes_intraday_instruments_request = search_quotes_intraday_instruments_request;

    let uri_str = format!("{}/v1/intraday/instruments", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_search_quotes_intraday_instruments_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchQuotesPortfolios200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchQuotesPortfolios200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchQuotesIntradayInstrumentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

