/*
 * API Hartza Capital
 *
 * ## Welcome to the Hartza Capital API documentation  This comprehensive financial data API provides access to market information, portfolio management capabilities, and sophisticated trading tools.  For production use, an OAuth2 token is required. After authentication, you'll receive a token with a 15-minute lifespan.  When this period expires, please use your refresh token to obtain a new access token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1ExchangesBulkResponse : Exchanges is the list of exchanges used in the country.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1ExchangesBulkResponse {
    /// Unique identifier symbol (Market identifier codes (ISO 10383)) for this financial instrument, following standard market conventions.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// TickerAlternatives is a list of alternative identifiers for the country.
    #[serde(rename = "ticker_alternatives", skip_serializing_if = "Option::is_none")]
    pub ticker_alternatives: Option<Vec<String>>,
    /// Routing is the routing code for the exchange. It is the code used to route orders to the exchange.
    #[serde(rename = "routing", skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
    /// Name is the name of the exchange.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Currency is the currency used by the exchange.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// Region is the region where the exchange is located.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Continent is the continent where the exchange is located.
    #[serde(rename = "continent", skip_serializing_if = "Option::is_none")]
    pub continent: Option<String>,
    /// Open is a boolean value that indicates if the exchange is open.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl V1ExchangesBulkResponse {
    /// Exchanges is the list of exchanges used in the country.
    pub fn new() -> V1ExchangesBulkResponse {
        V1ExchangesBulkResponse {
            ticker: None,
            ticker_alternatives: None,
            routing: None,
            name: None,
            currency: None,
            region: None,
            continent: None,
            status: None,
        }
    }
}
/// Open is a boolean value that indicates if the exchange is open.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "OPEN")]
    Open,
    #[serde(rename = "CLOSED")]
    Closed,
    #[serde(rename = "PRE_MARKET")]
    PreMarket,
    #[serde(rename = "POST_MARKET")]
    PostMarket,
}

impl Default for Status {
    fn default() -> Status {
        Self::Open
    }
}

