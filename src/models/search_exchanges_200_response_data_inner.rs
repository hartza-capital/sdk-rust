/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchExchanges200ResponseDataInner {
    /// Ticker is the unique identifier for the exchanges.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    #[serde(rename = "ticker_alternatives", skip_serializing_if = "Option::is_none")]
    pub ticker_alternatives: Option<Vec<String>>,
    /// Name is the name of the exchanges.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Routing is the routing code for the exchanges. It is the code used to route orders to the exchanges.
    #[serde(rename = "routing", skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
    /// Currency is the currency used of the exchanges.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// MarketCapUSD is the market cap in USD of the exchanges.
    #[serde(rename = "market_cap_usd", skip_serializing_if = "Option::is_none")]
    pub market_cap_usd: Option<i64>,
    /// Count is the total number of instruments.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    /// Open is a boolean value that indicates if the exchange is open.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Region is the region of the exchanges.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Continent is the continent of the exchanges.
    #[serde(rename = "continent", skip_serializing_if = "Option::is_none")]
    pub continent: Option<String>,
    /// Next close or open in seconds
    #[serde(rename = "next", skip_serializing_if = "Option::is_none")]
    pub next: Option<i64>,
    /// Timezone name
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// UpdatedAt is the last update date of the forex.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
}

impl SearchExchanges200ResponseDataInner {
    pub fn new() -> SearchExchanges200ResponseDataInner {
        SearchExchanges200ResponseDataInner {
            ticker: None,
            ticker_alternatives: None,
            name: None,
            routing: None,
            currency: None,
            market_cap_usd: None,
            count: None,
            status: None,
            region: None,
            continent: None,
            next: None,
            timezone: None,
            updated_at: None,
        }
    }
}
/// Open is a boolean value that indicates if the exchange is open.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "OPEN")]
    Open,
    #[serde(rename = "CLOSED")]
    Closed,
    #[serde(rename = "PRE_MARKET")]
    PreMarket,
    #[serde(rename = "POST_MARKET")]
    PostMarket,
}

impl Default for Status {
    fn default() -> Status {
        Self::Open
    }
}

