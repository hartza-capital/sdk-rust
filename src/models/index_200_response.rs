/*
 * API Hartza Capital
 *
 * ## Welcome to the Hartza Capital API documentation  This comprehensive financial data API provides access to market information, portfolio management capabilities, and sophisticated trading tools.  For production use, an OAuth2 token is required. After authentication, you'll receive a token with a 15-minute lifespan.  When this period expires, please use your refresh token to obtain a new access token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Index200Response {
    /// Unique identifier symbol for this financial instrument, following standard market conventions.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// Name is the name of the security.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Exchange is the exchange where the security is traded.
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    /// Country is a boolean value that indicates if the security is the principal country index.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<bool>,
    /// Activity is a map of activities that the security is involved in.
    #[serde(rename = "activity", skip_serializing_if = "Option::is_none")]
    pub activity: Option<std::collections::HashMap<String, String>>,
    /// SubIndexes is a list of indexes that are part of the security.
    #[serde(rename = "sub_indexes", skip_serializing_if = "Option::is_none")]
    pub sub_indexes: Option<Vec<String>>,
    /// Size of index
    #[serde(rename = "sizecap", skip_serializing_if = "Option::is_none")]
    pub sizecap: Option<String>,
    #[serde(rename = "quote", skip_serializing_if = "Option::is_none")]
    pub quote: Option<Box<models::V1QuoteResponse>>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<models::V1StatsResponse>>,
}

impl Index200Response {
    pub fn new() -> Index200Response {
        Index200Response {
            ticker: None,
            name: None,
            exchange: None,
            country: None,
            activity: None,
            sub_indexes: None,
            sizecap: None,
            quote: None,
            stats: None,
        }
    }
}

