/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1ScreenerSort : ScreenerRequestSort is used to specify the sort for a search.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1ScreenerSort {
    /// Argument is the argument to sort by.
    #[serde(rename = "argument", skip_serializing_if = "Option::is_none")]
    pub argument: Option<Argument>,
    /// Orientation is the orientation of the sort.
    #[serde(rename = "orientation", skip_serializing_if = "Option::is_none")]
    pub orientation: Option<Orientation>,
}

impl V1ScreenerSort {
    /// ScreenerRequestSort is used to specify the sort for a search.
    pub fn new() -> V1ScreenerSort {
        V1ScreenerSort {
            argument: None,
            orientation: None,
        }
    }
}
/// Argument is the argument to sort by.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Argument {
    #[serde(rename = "time")]
    Time,
    #[serde(rename = "id")]
    Id,
    #[serde(rename = "market_cap_usd")]
    MarketCapUsd,
    #[serde(rename = "ticker")]
    Ticker,
    #[serde(rename = "change")]
    Change,
}

impl Default for Argument {
    fn default() -> Argument {
        Self::Time
    }
}
/// Orientation is the orientation of the sort.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Orientation {
    #[serde(rename = "ASC")]
    Asc,
    #[serde(rename = "DESC")]
    Desc,
}

impl Default for Orientation {
    fn default() -> Orientation {
        Self::Asc
    }
}

