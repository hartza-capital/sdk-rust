/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AccountById200Response : GetAccountsResponse is used to specify the response for the GetAccounts API.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountById200Response {
    /// Name is a short description of account
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description is the description of the account.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// CurrencyBase is the base currency of the account. It is the currency used to calculate the account value.
    #[serde(rename = "currency_base", skip_serializing_if = "Option::is_none")]
    pub currency_base: Option<String>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<models::V1FilterResponse>>,
    #[serde(rename = "strategy", skip_serializing_if = "Option::is_none")]
    pub strategy: Option<Box<models::V1StrategyResponse>>,
    /// MaxDrawdown is the maximum drawdown of the account. It is the maximum loss from a peak to a trough of a portfolio, before a new peak is attained.
    #[serde(rename = "max_drawdown", skip_serializing_if = "Option::is_none")]
    pub max_drawdown: Option<f32>,
    /// MaxPositions is the maximum number of positions in the account. It is the maximum number of positions that can be held in the account.
    #[serde(rename = "max_positions", skip_serializing_if = "Option::is_none")]
    pub max_positions: Option<i32>,
    /// Status is the status of the account. It is the status of the account.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// CreatedAt is the creation date of the account.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// UpdatedAt is the last update date of the account.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
}

impl AccountById200Response {
    /// GetAccountsResponse is used to specify the response for the GetAccounts API.
    pub fn new() -> AccountById200Response {
        AccountById200Response {
            name: None,
            description: None,
            currency_base: None,
            filter: None,
            strategy: None,
            max_drawdown: None,
            max_positions: None,
            status: None,
            created_at: None,
            updated_at: None,
        }
    }
}
/// Status is the status of the account. It is the status of the account.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "INACTIVE")]
    Inactive,
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "DELETED")]
    Deleted,
}

impl Default for Status {
    fn default() -> Status {
        Self::Unknown
    }
}

