/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Orders400Response : Status is used to specify the status of the response.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Orders400Response {
    /// Code is the status code.
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Details is a list of messages that provide additional information about the error.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
}

impl Orders400Response {
    /// Status is used to specify the status of the response.
    pub fn new() -> Orders400Response {
        Orders400Response {
            code: None,
            reason: None,
            message: None,
            metadata: None,
        }
    }
}

