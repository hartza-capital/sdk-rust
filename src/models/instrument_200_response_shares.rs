/*
 * API Hartza Capital
 *
 * ## Welcome to the Hartza Capital API documentation  This comprehensive financial data API provides access to market information, portfolio management capabilities, and sophisticated trading tools.  For production use, an OAuth2 token is required. After authentication, you'll receive a token with a 15-minute lifespan.  When this period expires, please use your refresh token to obtain a new access token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Instrument200ResponseShares {
    /// Divisor is the divisor used to calculate the index. It is used to normalize the index.
    #[serde(rename = "divisor", skip_serializing_if = "Option::is_none")]
    pub divisor: Option<f64>,
    /// Float is the number of shares that are available for trading. It is the number of shares that are not held by insiders, restricted stockholders, and the company's employee stock ownership plan.
    #[serde(rename = "float", skip_serializing_if = "Option::is_none")]
    pub float: Option<i64>,
    /// Outstanding is the number of shares outstanding. It is the number of shares that are currently held by all shareholders.
    #[serde(rename = "outstanding", skip_serializing_if = "Option::is_none")]
    pub outstanding: Option<i64>,
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<Box<models::SharesOrder>>,
}

impl Instrument200ResponseShares {
    pub fn new() -> Instrument200ResponseShares {
        Instrument200ResponseShares {
            divisor: None,
            float: None,
            outstanding: None,
            order: None,
        }
    }
}

