/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Country200ResponseGeographic {
    /// Region is the region of the country. Example: Europe.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Continent is the continent of the country. Example: Europe.
    #[serde(rename = "continent", skip_serializing_if = "Option::is_none")]
    pub continent: Option<String>,
    /// Capital is the capital of the country. Example: Paris for France.
    #[serde(rename = "capital", skip_serializing_if = "Option::is_none")]
    pub capital: Option<String>,
    /// EuMember is the EU member status of the country. Example: true for France.
    #[serde(rename = "eu_member", skip_serializing_if = "Option::is_none")]
    pub eu_member: Option<bool>,
    /// Borders is the list of countries that border the country. Example: Germany for France. ISO 3166-1 alpha-2 code.
    #[serde(rename = "borders", skip_serializing_if = "Option::is_none")]
    pub borders: Option<Vec<String>>,
}

impl Country200ResponseGeographic {
    pub fn new() -> Country200ResponseGeographic {
        Country200ResponseGeographic {
            region: None,
            continent: None,
            capital: None,
            eu_member: None,
            borders: None,
        }
    }
}

