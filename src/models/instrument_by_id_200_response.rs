/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InstrumentById200Response : GetInstrumentResponse is used to specify the response for the GetInstrument API.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstrumentById200Response {
    /// Id is the unique identifier for the security.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Ticker is the unique identifier for the security.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// TickerAlternative is the alternative identifier for the security.
    #[serde(rename = "ticker_alternative", skip_serializing_if = "Option::is_none")]
    pub ticker_alternative: Option<String>,
    /// Name is the name of the security.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description is the description of the security.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<Box<models::V1ExchangeBulkResponse>>,
    /// Asset is the asset class of the security.
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    /// CIK is the Central Index Key (CIK) is a number used to identify the filings of a business.
    #[serde(rename = "cik", skip_serializing_if = "Option::is_none")]
    pub cik: Option<String>,
    /// ISIN is the International Securities Identification Number (ISIN) is a code that uniquely identifies a specific securities issue.
    #[serde(rename = "isin", skip_serializing_if = "Option::is_none")]
    pub isin: Option<String>,
    /// ADR is a boolean value that indicates if the security is an American Depositary Receipt.
    #[serde(rename = "adr", skip_serializing_if = "Option::is_none")]
    pub adr: Option<bool>,
    /// Activity is a map of activities that the security is involved in.
    #[serde(rename = "activity", skip_serializing_if = "Option::is_none")]
    pub activity: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "quote", skip_serializing_if = "Option::is_none")]
    pub quote: Option<Box<models::V1QuoteResponse>>,
    /// Dividends is a list of dividends that the security has paid.
    #[serde(rename = "dividends", skip_serializing_if = "Option::is_none")]
    pub dividends: Option<Vec<models::V1DividendResponse>>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<models::InstrumentById200ResponseStats>>,
    /// Employees is the number of employees that the company has.
    #[serde(rename = "employees", skip_serializing_if = "Option::is_none")]
    pub employees: Option<i32>,
    #[serde(rename = "shares", skip_serializing_if = "Option::is_none")]
    pub shares: Option<Box<models::InstrumentById200ResponseShares>>,
    #[serde(rename = "tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<Box<models::InstrumentById200ResponseTax>>,
    #[serde(rename = "contact", skip_serializing_if = "Option::is_none")]
    pub contact: Option<Box<models::InstrumentById200ResponseContact>>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<models::InstrumentById200ResponseAddress>>,
    /// CreatedAt is the time at which the instrument was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// UpdatedAt is the time at which the instrument was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
}

impl InstrumentById200Response {
    /// GetInstrumentResponse is used to specify the response for the GetInstrument API.
    pub fn new() -> InstrumentById200Response {
        InstrumentById200Response {
            id: None,
            ticker: None,
            ticker_alternative: None,
            name: None,
            description: None,
            exchange: None,
            asset: None,
            cik: None,
            isin: None,
            adr: None,
            activity: None,
            quote: None,
            dividends: None,
            stats: None,
            employees: None,
            shares: None,
            tax: None,
            contact: None,
            address: None,
            created_at: None,
            updated_at: None,
        }
    }
}

