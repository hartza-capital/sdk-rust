/*
 * API Hartza Capital
 *
 * ## Welcome to the Hartza Capital API documentation  This comprehensive financial data API provides access to market information, portfolio management capabilities, and sophisticated trading tools.  For production use, an OAuth2 token is required. After authentication, you'll receive a token with a 15-minute lifespan.  When this period expires, please use your refresh token to obtain a new access token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1IndicatorResponse : Delivers detailed information about a financial or economic indicator, including its identification, classification, time interval, and significance level for market analysis.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1IndicatorResponse {
    /// Ticker is the unique identifier for the indicator.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// Name is the name of the indicator. It is the human readable name of the indicator.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Interval is the interval of the indicator. It is the time period of the indicator.
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// Level is the level of the indicator. It is the level of the indicator.
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<Level>,
}

impl V1IndicatorResponse {
    /// Delivers detailed information about a financial or economic indicator, including its identification, classification, time interval, and significance level for market analysis.
    pub fn new() -> V1IndicatorResponse {
        V1IndicatorResponse {
            ticker: None,
            name: None,
            interval: None,
            level: None,
        }
    }
}
/// Level is the level of the indicator. It is the level of the indicator.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "HIGH")]
    High,
    #[serde(rename = "MEDIUM")]
    Medium,
    #[serde(rename = "LOW")]
    Low,
}

impl Default for Level {
    fn default() -> Level {
        Self::Unknown
    }
}

