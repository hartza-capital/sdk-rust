/*
 * API Hartza Capital
 *
 * ## Welcome to the Hartza Capital API documentation  This comprehensive financial data API provides access to market information, portfolio management capabilities, and sophisticated trading tools.  For production use, an OAuth2 token is required. After authentication, you'll receive a token with a 15-minute lifespan.  When this period expires, please use your refresh token to obtain a new access token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1StatsResponse : StatsResponse is used to specify the response for the Stats API.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1StatsResponse {
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<Size>,
    /// MarketCapUSD is the market capitalization of the security in USD.
    #[serde(rename = "market_cap_usd", skip_serializing_if = "Option::is_none")]
    pub market_cap_usd: Option<i64>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<Box<models::StatsResponsePrice>>,
    #[serde(rename = "volumes", skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Box<models::StatsResponseVolumes>>,
    /// DividendYield is the dividend yield of the security. It is the ratio of a company's annual dividend compared to its share price.
    #[serde(rename = "dividend_yield", skip_serializing_if = "Option::is_none")]
    pub dividend_yield: Option<f64>,
    /// Timestamp (in Unix epoch seconds) when this resource was last modified.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
}

impl V1StatsResponse {
    /// StatsResponse is used to specify the response for the Stats API.
    pub fn new() -> V1StatsResponse {
        V1StatsResponse {
            size: None,
            market_cap_usd: None,
            price: None,
            volumes: None,
            dividend_yield: None,
            updated_at: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Size {
    #[serde(rename = "BIGCAP")]
    Bigcap,
    #[serde(rename = "MIDCAP")]
    Midcap,
    #[serde(rename = "SMALLCAP")]
    Smallcap,
}

impl Default for Size {
    fn default() -> Size {
        Self::Bigcap
    }
}

