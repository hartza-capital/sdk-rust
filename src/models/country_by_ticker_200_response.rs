/*
 * API Hartza Capital
 *
 * ## Welcome on the Hartza Capital API documentation  For production use, you must obtain an oAuth2 token. To have this token, please authenticate and use your token.    The token has a lifespan of 15 minutes, after this period please renew it with the refresh token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CountryByTicker200Response {
    /// Ticker is the unique identifier for the country.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// TickerAlternative is the alternative unique identifier for the country.
    #[serde(rename = "ticker_alternative", skip_serializing_if = "Option::is_none")]
    pub ticker_alternative: Option<String>,
    /// Name is the name of the country. It is the human readable name of the country.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Languages is the list of languages used in the country. Example: French for France.
    #[serde(rename = "languages", skip_serializing_if = "Option::is_none")]
    pub languages: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "economic", skip_serializing_if = "Option::is_none")]
    pub economic: Option<Box<models::CountryByTicker200ResponseEconomic>>,
    #[serde(rename = "telecom", skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Box<models::CountryByTicker200ResponseTelecom>>,
    #[serde(rename = "geographic", skip_serializing_if = "Option::is_none")]
    pub geographic: Option<Box<models::CountryByTicker200ResponseGeographic>>,
    /// Indicators is the list of MacroEconomic indicators used in the country. Example: GDP for France.
    #[serde(rename = "indicators", skip_serializing_if = "Option::is_none")]
    pub indicators: Option<std::collections::HashMap<String, models::CountryByTicker200ResponseIndicatorsValue>>,
}

impl CountryByTicker200Response {
    pub fn new() -> CountryByTicker200Response {
        CountryByTicker200Response {
            ticker: None,
            ticker_alternative: None,
            name: None,
            languages: None,
            economic: None,
            telecom: None,
            geographic: None,
            indicators: None,
        }
    }
}

