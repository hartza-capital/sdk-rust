/*
 * API Hartza Capital
 *
 * ## Welcome to the Hartza Capital API documentation  This comprehensive financial data API provides access to market information, portfolio management capabilities, and sophisticated trading tools.  For production use, an OAuth2 token is required. After authentication, you'll receive a token with a 15-minute lifespan.  When this period expires, please use your refresh token to obtain a new access token. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hartza.capital
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// User200ResponseConfig : Config is the configuration of the user.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct User200ResponseConfig {
    /// Locale is the locale of the user.
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// Theme is the theme of the user.
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<Theme>,
    /// Timezone is the timezone of the user.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

impl User200ResponseConfig {
    /// Config is the configuration of the user.
    pub fn new() -> User200ResponseConfig {
        User200ResponseConfig {
            locale: None,
            theme: None,
            timezone: None,
        }
    }
}
/// Theme is the theme of the user.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Theme {
    #[serde(rename = "light")]
    Light,
    #[serde(rename = "dark")]
    Dark,
}

impl Default for Theme {
    fn default() -> Theme {
        Self::Light
    }
}

